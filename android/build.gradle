apply plugin: 'com.android.application'

android {
  namespace "com.riiablo"
  sourceSets {
    main {
      manifest.srcFile 'AndroidManifest.xml'
      java.srcDirs = ['src/main/java']
      aidl.srcDirs = ['src/main/java']
      renderscript.srcDirs = ['src/main/java']
      res.srcDirs = ['res']
      assets.srcDirs = [rootProject.file('assets').path]
      jniLibs.srcDirs = ['libs']
    }
  }
  packagingOptions {
    exclude 'META-INF/robovm/ios/robovm.xml'
  }
  compileSdkVersion 34
  defaultConfig {
    applicationId "com.riiablo"
    minSdkVersion 23
    targetSdkVersion 30
    versionCode 1
    versionName "$version"
    archivesBaseName = "$appName-$version"
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

configurations { natives }

dependencies {
  implementation project(":core")
  implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
  natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
  natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
  natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
  natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"
  implementation "com.badlogicgames.gdx-controllers:gdx-controllers-android:$gdxControllersVersion"
}

dependencies {
  implementation "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
  natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a"
  natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-arm64-v8a"
  natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86"
  natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86_64"
}

repositories {
  google()
  gradlePluginPortal()
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
  file("libs/armeabi/").mkdirs();
  file("libs/armeabi-v7a/").mkdirs();
  file("libs/arm64-v8a/").mkdirs();
  file("libs/x86_64/").mkdirs();
  file("libs/x86/").mkdirs();

  configurations.natives.files.each { jar ->
    def outputDir = null
    if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
    if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
    if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
    if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
    if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
    if (outputDir != null) {
      copy {
        from zipTree(jar)
        into outputDir
        include "*.so"
      }
    }
  }
}

task run(type: Exec) {
  def path
  def localProperties = project.file("../local.properties")
  if (localProperties.exists()) {
    Properties properties = new Properties()
    localProperties.withInputStream { instr ->
      properties.load(instr)
    }
    def sdkDir = properties.getProperty('sdk.dir')
    if (sdkDir) {
      path = sdkDir
    } else {
      path = "$System.env.ANDROID_HOME"
    }
  } else {
    path = "$System.env.ANDROID_HOME"
  }

  def adb = path + "/platform-tools/adb"
  commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.riiablo/com.riiablo.AndroidLauncher'
}
