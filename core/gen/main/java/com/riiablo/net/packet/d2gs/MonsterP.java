// automatically generated by the FlatBuffers compiler, do not modify

package com.riiablo.net.packet.d2gs;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class MonsterP extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static MonsterP getRootAsMonsterP(ByteBuffer _bb) { return getRootAsMonsterP(_bb, new MonsterP()); }
  public static MonsterP getRootAsMonsterP(ByteBuffer _bb, MonsterP obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MonsterP __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int monsterId() { int o = __offset(4); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }

  public static int createMonsterP(FlatBufferBuilder builder,
      int monsterId) {
    builder.startTable(1);
    MonsterP.addMonsterId(builder, monsterId);
    return MonsterP.endMonsterP(builder);
  }

  public static void startMonsterP(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addMonsterId(FlatBufferBuilder builder, int monsterId) { builder.addShort(0, (short) monsterId, (short) 0); }
  public static int endMonsterP(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MonsterP get(int j) { return get(new MonsterP(), j); }
    public MonsterP get(MonsterP obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

